Number.prototype.formatMoney = function(e, t, n) { var r = this,
        o = (e = isNaN(e = Math.abs(e)) ? 2 : e, t = null == t ? "." : t, n = null == n ? "," : n, r < 0 ? "-" : ""),
        a = parseInt(r = Math.abs(+r || 0).toFixed(e)) + "",
        i = (i = a.length) > 3 ? i % 3 : 0; return o + (i ? a.substr(0, i) + n : "") + a.substr(i).replace(/(\d{3})(?=\d)/g, "$1" + n) + (e ? t + Math.abs(r - a).toFixed(e).slice(2) : "") };
var fha__calculator = { dollar: null, init: function() { jQuery(".highcharts-root .highcharts-button").slideUp(), jQuery(".highcharts-root .highcharts-button").eq(0).slideDown(), jQuery(".highcharts-root .highcharts-button").eq(5).slideDown(), flatpickr(".date", { dateFormat: "m-d-y" }), new AutoNumeric.multiple(".dollar", { currencySymbol: "$", digitGroupSeparator: ",", decimalPlaces: 2, decimalCharacter: ".", decimalPlacesOverride: 2, minimumValue: -1e18, maximumValue: 1e18, currencySymbolPlacement: "p" }), new AutoNumeric.multiple(".whole", { decimalPlaces: 0, digitGroupSeparator: ",", decimalCharacter: ".", decimalPlacesOverride: 0, minimumValue: -1e18, maximumValue: 1e18, currencySymbolPlacement: "p" }), new AutoNumeric.multiple(".dollar-positive", { currencySymbol: "$", decimalPlaces: 2, digitGroupSeparator: ",", decimalCharacter: ".", decimalPlacesOverride: 2, minimumValue: 0, maximumValue: 1e18, currencySymbolPlacement: "p" }), this.listener(), this.calculate() }, ovveride_min: "", ovveride_incr: "", xaxis_zoomIn_min: 0, xaxis_zoomIn_incr: 0, listener: function() { jQuery("#add_leg").click(function() { return jQuery(".clone_hide").first().addClass("clone").removeClass("clone_hide"), !1 }); var e = 0;
        jQuery("#add_adj").click(function() { return e < 9 && (jQuery("table tr").each(function() { jQuery(this).find("td").eq(e + 4).css("display", "table-cell"), jQuery(this).find("th").eq(e + 4).css("display", "table-cell") }), e++, !1) }), jQuery("#clear").click(function() { return jQuery(".result_value").each(function() { jQuery(this).html("-") }), jQuery(".forms").each(function() { jQuery(this).val("") }), jQuery(".dollar").each(function() { AutoNumeric.set("#" + jQuery(this).attr("id"), "") }), jQuery(".dollar-positive").each(function() { AutoNumeric.set("#" + jQuery(this).attr("id"), "") }), jQuery(".whole").each(function() { AutoNumeric.set("#" + jQuery(this).attr("id"), "") }), jQuery(".date").each(function() { jQuery(this).val("") }), fha__calculator.calculate(), !1 }); for (var t = document.querySelectorAll("input[type='text']"), n = 0; n < t.length; n++) t[n].addEventListener("change", function(e) { fha__calculator.calculate() }); var r = document.querySelectorAll("input[type='radio']"); for (n = 0; n < r.length; n++) r[n].addEventListener("click", function(e) { fha__calculator.calculate() }) }, c__j: function(e, t, n, r) { for (var o = parseFloat(AutoNumeric.getNumber("#size")), a = [], i = 0; i <= e; i++) { for (var l = 0, s = 0; s < jQuery(".leg").length; s++) l += Math.max("call" == n[s].cp ? r[i] - n[s].strike : n[s].strike - r[i], 0) * n[s].contracts;
            a[i] = (t + l) * o } return a }, odb: function() { for (var e = [], t = 0; t < jQuery("th").length - 1; t++) { e[t] = []; for (var n = 1; n <= jQuery(".leg").length; n++) { var r = parseFloat(AutoNumeric.getNumber("#nc_" + n + "_" + t)),
                    o = document.querySelector('input[name="call_put_' + n + "_" + t + '"]:checked').value,
                    a = parseFloat(AutoNumeric.getNumber("#strike_" + n + "_" + t)),
                    i = parseFloat(AutoNumeric.getNumber("#transaction_" + t));
                e[t].push({ contracts: r, cp: o, strike: a, transaction: i }) } } return e }, b_104_167: function(e) { for (var t = [], n = 0; n < jQuery("th").length - 1; n++) { t[n] = [0]; for (e = 1; e <= jQuery(".leg").length; e++) { var r = parseFloat(AutoNumeric.getNumber("#strike_" + e + "_" + n));
                t[n].push(r) } } for (n = 0; n < t.length; n++) { var o = Math.max(...t[n]);
            t[n].push(o), t[n].push(o + 1) } return t }, loss: function(e) { for (var t = [], n = 0; n < e.length - 2; n++) t.push(e[n]); return void 0 !== e && (e[e.length - 1] < e[e.length - 2] ? "Unlimited" : Math.min(...t)) }, profit: function(e) { for (var t = [], n = 0; n < e.length - 2; n++) t.push(e[n]); return void 0 !== e && (e[e.length - 1] > e[e.length - 2] ? "Unlimited" : Math.max(...t)) }, be: function(e, t) { for (var n = [], r = 0; r < e.length; r++) { n[r] = []; for (var o = 1; o < e[r].length; o++) e[r][o] && (Math.sign(e[r][o]) == Math.sign(e[r][o - 1]) ? n[r][o] = 0 : n[r][o] = t[r][o - 1] + (t[r][o] - t[r][o - 1]) * (0 - e[r][o - 1]) / (e[r][o] - e[r][o - 1]));
            n[r].shift() } return n }, calculate: function() { for (var e = { size: parseFloat(AutoNumeric.getNumber("#size")), c: [], b: [parseFloat(AutoNumeric.getNumber("#start"))], increment: parseFloat(AutoNumeric.getNumber("#increment")), tr_summ: 0, b___summ: 0, g___summ: 0, g5: parseFloat(AutoNumeric.getNumber("#cprice")) }, t = this.odb(), n = this.b_104_167(), r = 1; r <= 67; r++) e.b[r] = e.b[r - 1] + e.increment; var o = []; for (r = 0; r < t.length; r++) 0 != t[r][0].transaction && (e.tr_summ += t[r][0].transaction, o[r] = this.c__j(67, e.tr_summ, t[r], e.b)); var a = []; for (r = 0; r < t.length; r++) 0 != t[r][0].transaction && (e.b___summ += t[r][0].transaction, a[r] = this.c__j(n[r].length - 1, e.b___summ, t[r], n[r])); for (r = 0; r < a.length; r++) "" != document.getElementById("transaction_" + r).value ? "Unlimited" != this.loss(a[r]) ? 0 != this.loss(a[r]) ? document.getElementById("maxloss__" + r).innerHTML = "$" + this.loss(a[r]).formatMoney(2, ".", ",") : document.getElementById("maxloss__" + r).innerHTML = "-" : document.getElementById("maxloss__" + r).innerHTML = this.loss(a[r]) : document.getElementById("maxloss__" + r).innerHTML = "-"; for (r = 0; r < a.length; r++) "" != document.getElementById("transaction_" + r).value ? "Unlimited" != this.profit(a[r]) ? 0 != this.profit(a[r]) ? document.getElementById("maxprofit_" + r).innerHTML = "$" + this.profit(a[r]).formatMoney(2, ".", ",") : document.getElementById("maxprofit_" + r).innerHTML = "-" : document.getElementById("maxprofit_" + r).innerHTML = this.profit(a[r]) : document.getElementById("maxprofit_" + r).innerHTML = "-"; var i = []; for (r = 0; r < t.length; r++) { i[r] = []; for (var l = 0; l < t[r].length; l++) i[r][l] = t[r][l].strike;
            i[r].push(1e9), i[r].unshift(0), i[r].sort((e, t) => e - t) } var s = []; for (r = 0; r < t.length; r++) 0 != t[r][0].transaction && (e.g___summ += t[r][0].transaction, s[r] = this.c__j(i[r].length - 1, e.g___summ, t[r], i[r])); var c = this.be(s, i); for (r = 0; r < c.length; r++)
            if ("" != document.getElementById("transaction_" + r).value)
                for (l = 0; l < c[r].length; l++) 0 != c[r][l] ? document.getElementById("bp_" + (l + 1) + "_" + r).innerHTML = "$" + c[r][l].formatMoney(2, ".", ",") : document.getElementById("bp_" + (l + 1) + "_" + r).innerHTML = "-";
            else
                for (l = 0; l < c[r].length; l++) document.getElementById("bp_" + (l + 1) + "_" + r).innerHTML = "-";
        var u = []; for (l = 1; l < 8; l++) { u[l] = []; for (r = 0; r < 11; r++) "-" == jQuery("#bp_" + l + "_" + r).html() ? u[l][r] = 0 : u[l][r] = void 0 } for (l = 1; l < u.length; l++) { var m = u[l].reduce((e, t) => e + t, 0);
            console.log(m), isNaN(m) ? jQuery(".bp__" + l).css("display", "table-row").removeClass("bphide") : jQuery(".bp__" + l).css("display", "none").addClass("bphide") }
        7 == jQuery(".bphide").length ? jQuery("table.bp").addClass("hidename") : jQuery("table.bp").removeClass("hidename"), e.g3 = e.tr_summ, e.g6 = 0 == e.g5 ? 0 : e.g5 * e.size, e.j3 = e.g3 * e.size, e.j5 = e.j3 + e.g6, "" == document.getElementById("cprice").value ? (e.j4 = "Enter Price", document.getElementById("action_cell").style.background = "#e1e1e1", document.getElementById("action_cell").style.color = "#000000") : e.j5 >= 0 ? (e.j4 = "Closed For Profit", document.getElementById("action_cell").style.background = "green", document.getElementById("action_cell").style.color = "#ffffff") : (e.j4 = "Closed for Loss", document.getElementById("action_cell").style.background = "red", document.getElementById("action_cell").style.color = "#ffffff"), document.getElementById("action").innerHTML = e.j4, "" == document.getElementById("cprice").value ? document.getElementById("profit_loss").innerHTML = "$0.00" : document.getElementById("profit_loss").innerHTML = "$" + e.j5.formatMoney(2, ".", ","), document.getElementById("credit").innerHTML = "$" + e.j3.formatMoney(2, ".", ","), document.getElementById("credit_share").innerHTML = "$" + e.g3.formatMoney(2, ".", ","), document.getElementById("buyout").innerHTML = "$" + e.g6.formatMoney(2, ".", ","); var d = [],
            h = []; for (r = 0; r < o.length; r++) o[r] && (d[r] = Math.min(...o[r]), h[r] = Math.max(...o[r])); var g = Highcharts.chart("chart", { chart: { spacingLeft: 0, spacingRight: 0, pinchType: "", panning: !1, events: { load: function() { var e = this,
                                t = null,
                                n = (Math.max(...h) - Math.min(...d)) / 68,
                                r = (e.plotWidth, e.plotLeft, e.plotHeight / 2),
                                o = (e.renderer.image("https://i.ibb.co/WppHFbc/444.png", e.plotWidth / 2 + e.plotLeft - 175, r, 300, 72).add(), e.renderer.button("ZOOM", 30, 80, function() {}, { "text-align": "center" }, null, null, null, null, null).css({}).add().toFront()),
                                a = (t = e.renderer.button("&nbsp;&nbsp; UP", 30, 144, !0, function() {}, { "text-align": "center" }).css({ "text-align": "center" }).add().toFront(), e.renderer.button("DOWN", 30, 208, function() { s = e.yAxis[0].getExtremes().min, c = e.yAxis[0].getExtremes().max, u = e.xAxis[0].getExtremes().min, m = e.xAxis[0].getExtremes().max }).add().toFront()),
                                i = e.renderer.button("RIGHT", 30, 176, function() {}).add().toFront(),
                                l = e.renderer.button("&nbsp; LEFT", 30, 240, !0, function() {}).add().toFront(),
                                s = (e.renderer.button("RESET", 30, 112, function() { e.zoomOut(), jQuery(".highcharts-root .highcharts-button").slideUp(), jQuery(".highcharts-root .highcharts-button").eq(0).slideDown(), jQuery(".highcharts-root .highcharts-button").eq(5).slideDown(), s = e.yAxis[0].getExtremes().min, c = e.yAxis[0].getExtremes().max, u = e.xAxis[0].getExtremes().min, m = e.xAxis[0].getExtremes().max }).add().toFront(), e.yAxis[0].getExtremes().min),
                                c = e.yAxis[0].getExtremes().max,
                                u = e.xAxis[0].getExtremes().min,
                                m = e.xAxis[0].getExtremes().max;
                            o.on("click", function() { jQuery(".highcharts-root .highcharts-button").slideDown(), s += n, c -= n, u += 2.5, m -= 2.5, e.yAxis[0].setExtremes(s, c), e.xAxis[0].setExtremes(u, m) }), t.on("click", function() { c += n, s -= n, e.yAxis[0].setExtremes(s, c), e.xAxis[0].setExtremes(u, m) }), a.on("click", function() { c -= n, s += n, e.yAxis[0].setExtremes(s, c), e.xAxis[0].setExtremes(u, m) }), i.on("click", function() { u -= 2.5, m -= 2.5, e.yAxis[0].setExtremes(s, c), e.xAxis[0].setExtremes(u, m) }), l.on("click", function() { m += 2.5, u += 2.5, e.yAxis[0].setExtremes(s, c), e.xAxis[0].setExtremes(u, m) }), jQuery(".highcharts-root .highcharts-button").slideUp(), jQuery(".highcharts-root .highcharts-button").eq(0).slideDown(), jQuery(".highcharts-root .highcharts-button").eq(5).slideDown() } } }, mapNavigation: { enabled: !1 }, subtitle: { text: null }, navigator: { enabled: !1 }, rangeSelector: { enabled: !1 }, scrollbar: { enabled: !1 }, title: { text: "P&L Graph after adjustment", style: { color: "#000", fontWeight: "bold", fontSize: "15px", textTransform: "uppercase", fontFamily: "Fjalla One" }, margin: 0 }, yAxis: { title: { text: null }, startOnTick: !1, endOnTick: !1, showLastLabel: !0, opposite: !1, offset: 35, tickPixelInterval: 50, minorGridLineColor: "#e5e5e5", majorGridLineColor: "#e5e5e5", gridLineColor: "#e5e5e5", labels: { formatter: function() { return "$" + this.axis.defaultLabelFormatter.call(this) }, align: "left", x: 0, y: 2, style: { color: "#adabab", fontSize: "8px" }, enabled: !0 }, plotLines: [{ color: "#000", width: 1, value: 0, zIndex: 2 }] }, xAxis: { categories: e.b, lineColor: "#e5e5e5", title: { style: { color: "#e5e5e5", fontSize: 9 } }, labels: { formatter: function() { return "$" + this.value.formatMoney(2, ".", ",") }, enabled: !0, style: { color: "#adabab", fontSize: "8px" } } }, credits: { enabled: !1 }, tooltip: { backgroundColor: "rgba(255,255,255,1)", borderColor: "#888888", useHTML: !0, zIndex: 1200, crosshairs: !0, label: { attr: { zIndex: 1200 } }, shared: !0, formatter: function() { var e = "<span width=100% style='min-width: 235px;display:block;' class='tooltip-table'>";
                        (e += "<span><span style='text-align:left; padding-left:0; font-size: 0.8em;margin-bottom:5px;display:block;font-weight:bold;'>$" + this.x + ":</span></span>", this.points[0]) && (e += "<span style='display:flex;margin-bottom:2px;'><span style='width:70%;'><span style='background:#3368FF;color:#3368FF;display:inline-block;width:10px;height:10px;'></span> Initial Position </span><span style='font-weight: bold;'> " + ("$" + this.points[0].y.formatMoney(2, ".", ",")) + "</span></span>"); for (var t = 1; t < o.length; t++) o[t] && (e += "<span style='display:flex;margin-bottom:2px;'><span style='width:70%;'><span style='background:" + fha__calculator.colors[t - 1] + ";color:" + fha__calculator.colors[t - 1] + ";display:inline-block;width:10px;height:10px;'></span> Adjustment #" + t + " </span><span style='font-weight: bold;'> $" + this.points[t].y.formatMoney(2, ".", ",") + "</span></span>"); return e += "</span>" } }, legend: { layout: "horizontal", align: "center", verticalAlign: "top", itemStyle: { font: "7pt Trebuchet MS, Verdana, sans-serif", color: "#7b7a7a" } }, series: [{ name: "Initial Position", data: o[0], marker: { symbol: "triangle", radius: 3 }, color: "#3368FF" }], responsive: { rules: [{ condition: { maxWidth: 500 }, chartOptions: {} }] } }),
            f = ["square", "diamond", "circle", "triangle-down", "square", "diamond", "triangle-down", "circle", "diamond", "square"]; for (r = 1; r < o.length; r++) g.addSeries({ name: "Adjustment #" + r, data: o[r], marker: { symbol: f[r - 1], radius: 3 }, color: fha__calculator.colors[r - 1] }, !1);
        g.redraw() }, colors: ["#FF8F32", "#B3B2B1", "#EED30D", "#09CFE3", "#BF4F02", "#02BF0B", "#0224BF", "#0194BF", "#78bd00", "#ff0000"] };
fha__calculator.init();